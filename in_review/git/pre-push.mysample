#!/usr/bin/env python3
####################################################################################################
#Script Name	: pre-push
#Description	: A git hook script to check the branch name.
# 		  This script is called by "git push" with two arguments, the name of the remote
# 		  to which the push is done and the url of the remote git server. 
#		  The hook should exit with non-zero status in case of an invalid branch name. By
#		  returning a non-zero value, git will cancell the push operation and show an error
#		  message.
#                                                                                 
#Args           : 
# 			$1 -- Name of the remote to which the push is being done
# 			$2 -- URL to which the push is being done
# 			Information about the commits which are being pushed is supplied as lines to
# 			the standard input (stdin) in the form:
#				<local ref> <local sha1> <remote ref> <remote sha1>
#
#Author       	: Francisco GÃ¼emes                                                
#Email         	: francisco@franciscoguemes.com        
#See also	    : https://nvie.com/posts/a-successful-git-branching-model/
#                 https://stackoverflow.com/questions/7063420/perl-compatible-regular-expression-pcre-in-python
#		  
#		  	                                  
####################################################################################################

import re
import sys

# URL of the wiki page that contains extra information
URL_WIKI="<<URL_OF_YOUR_WIKI_FOR_BRANCH_NAMING_RULES>>"

# This regex must match the one defined in:
#   Github:
#   Gitlab: Go to the section "Push rules" of the site: YOUR_GITLAB_PROJECT_URL/-/settings/repository#js-push-rules
#
PCRE_REGEX="(^(master|main|develop|Release|(releases/.*)|(hotfixes/.*)))|(^(issue/\d{8,}/\d{2,}_.*))"

# Prefix for the remote branches location in git
PREFIX="refs/heads/"

if __name__ == "__main__":
    remote=sys.argv[1]
    url=sys.argv[2]

    lines = sys.stdin.readlines()
    data = lines[0].split()
    #print(data)

    local_ref=data[0]
    local_sha=data[1]
    remote_ref=data[2]
    remote_sha=data[3]	

    if remote_ref.startswith(PREFIX):
        remote_ref=remote_ref[len(PREFIX):]
    
    result = re.match(PCRE_REGEX, remote_ref)

    if not result:
        print(f"Your branch name do not adjust to the regex specified in the branching strategy: {repr(PCRE_REGEX)}")
        print(f"\t+ More information about the branching strategy at: {URL_WIKI}")
        print(f"\t+ More information on how to rename local and remote branches: https://linuxize.com/post/how-to-rename-local-and-remote-git-branch/")
        exit(1)


	






